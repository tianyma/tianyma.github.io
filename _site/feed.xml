<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh" /><updated>2020-11-28T22:24:06+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">tianyma’s blog</title><subtitle>do valuable research, be valuable person.
</subtitle><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><entry><title type="html">CAC2020(for pdf view test)</title><link href="http://localhost:4000/2020/11/26/pdf-test.html" rel="alternate" type="text/html" title="CAC2020(for pdf view test)" /><published>2020-11-26T00:00:00+08:00</published><updated>2020-11-26T00:00:00+08:00</updated><id>http://localhost:4000/2020/11/26/pdf-test</id><content type="html" xml:base="http://localhost:4000/2020/11/26/pdf-test.html">&lt;center&gt;
&lt;!-- &lt;iframe src=&quot;http://docs.google.com/gview?url=/pdf/CAC2020.pdf&amp;embedded=true&quot; style=&quot;width:718px; height:700px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt; --&gt;
&lt;!-- &lt;iframe src=&quot;/web/viewer.html?file=/pdf/CAC2020.pdf&quot;&gt;&lt;/iframe&gt; --&gt;
&lt;!-- &lt;iframe src=&quot;http://docs.google.com/gview?url=/pdf/CAC2020.pdf&amp;embedded=true&quot; style=&quot;width:500px; height:100px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt; --&gt;
&lt;!-- &lt;a href=&quot;https://github.com/tianyma/tianyma.github.io/blob/main/pdf/CAC2020.pdf&quot; class=&quot;image fit&quot; &gt;&lt;img src=&quot;images/marr_pic.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt; --&gt;
&lt;a href=&quot;/pdf.js/web/viewer.html?file=/pdf/CAC2020.pdf&quot;&gt;Click to view this blog.&lt;/a&gt;

&lt;!-- &lt;object data=&quot;/pdf/CAC2020.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type='application/pdf'/&gt; --&gt;
&lt;/center&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="paper" /><summary type="html">Click to view this blog.</summary></entry><entry><title type="html">使用docker运行多个版本的cuda</title><link href="http://localhost:4000/2020/11/21/docker-cuda.html" rel="alternate" type="text/html" title="使用docker运行多个版本的cuda" /><published>2020-11-21T00:00:00+08:00</published><updated>2020-11-21T00:00:00+08:00</updated><id>http://localhost:4000/2020/11/21/docker-cuda</id><content type="html" xml:base="http://localhost:4000/2020/11/21/docker-cuda.html">&lt;blockquote&gt;
  &lt;p&gt;如果你遇到了这样一个问题:&lt;/p&gt;

  &lt;p&gt;我的机器上装的cuda版本是最新的，比如cuda 11.1，然而我拿到了一个在cuda 8.0的版本上编译好的程序，我该怎么运行它呢？总不会我又要安装一个8.0的cuda吧。(这个问题来自于我在做cmu 15-418 assignment task2时需要运行在cuda8.0环境编译的参考程序cudaScan_ref，而我的cuda是11.1版本)&lt;/p&gt;

  &lt;p&gt;这个时候你肯定立刻会想到虚拟化，作为轻便好用的虚拟化工具，docker就派上用场了。&lt;/p&gt;

  &lt;p&gt;这篇文章就来介绍一下如何使用docker运行多版本的cuda。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;本机环境
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;系统：18.04.5 LTS (Bionic Beaver)
已安装cuda版本：11.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h2 id=&quot;１-docker准备&quot;&gt;１ docker准备&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;11-了解原理和基本命令&quot;&gt;1.1 了解原理和基本命令&lt;/h3&gt;
&lt;p&gt;如果你还是个docker小白，建议先通过&lt;a href=&quot;https://docs.docker.com/get-started/overview/&quot;&gt;官方文档&lt;/a&gt;了解一下docker的原理和基本用法，如运行、停止、删除镜像等。&lt;/p&gt;

&lt;h3 id=&quot;12-安装&quot;&gt;1.2 安装&lt;/h3&gt;
&lt;p&gt;官方的&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;安装教程&lt;/a&gt;提供了对应不同操作系统的安装方法。&lt;/p&gt;

&lt;p&gt;当然，由于ubuntu 18.04源已经集成了docker软件，可以直接通过包管理工具安装。方法是&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# on ubuntu 18.04
sudo apt instll docker.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-nvidia-container-toolkit准备&quot;&gt;2 Nvidia Container Toolkit准备&lt;/h2&gt;
&lt;p&gt;Nvidia目前提供&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nvidia Container Toolkit&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvidia-docker2&lt;/code&gt;包完成对docker的支持，可以通过&lt;a href=&quot;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker&quot;&gt;安装教程&lt;/a&gt;进行安装。&lt;/p&gt;

&lt;p&gt;安装的时候要注意其支持的系统环境和需要的环境依赖。&lt;/p&gt;

&lt;h2 id=&quot;3-在docker上运行cuda环境&quot;&gt;3 在docker上运行cuda环境&lt;/h2&gt;
&lt;p&gt;准备工作完成后，就可以来解决文章开始提出的问题了:如何在host环境为cuda11.1的情况下使用docker运行基于cuda8.0编译的程序？&lt;/p&gt;

&lt;h3 id=&quot;31-镜像获取&quot;&gt;3.1 镜像获取&lt;/h3&gt;
&lt;p&gt;首先要从&lt;a href=&quot;https://hub.docker.com/&quot;&gt;docker-hub&lt;/a&gt;上找到我们需要的环境的镜像，使用关键字&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cuda8.0&lt;/code&gt;搜索即可，然后在本地拉取镜像源。&lt;/p&gt;

&lt;p&gt;比如：我在docker-hub上找到这样的镜像：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;klauskyj/cuda8.0-cudnn7
&lt;/code&gt;。那么就可以通过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker pull klauskyj/cuda8.0-cudnn7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;拉取下来了。
通过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker ps -a 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到自己拉取的镜像。&lt;/p&gt;
&lt;h3 id=&quot;32-运行镜像&quot;&gt;3.2 运行镜像&lt;/h3&gt;
&lt;p&gt;类似于普通镜像运行自己拉取下来的镜像，runtime设为nvidia即可，如&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run -it --runtime=nvidia [DOCKER_IMAGE]:[DOCKER_TAG] /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;进入交互式环境后，去&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;目录下就可以看到cuda 8.0了。&lt;/p&gt;
&lt;h3 id=&quot;33-运行程序&quot;&gt;3.3 运行程序&lt;/h3&gt;
&lt;p&gt;那么如何在容器中运行程序呢？我们需要将程序拷贝进去。从主机拷贝文件到容器中步骤如下：&lt;/p&gt;

&lt;p&gt;1.通过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;获取容器的短ID或者name。&lt;/p&gt;

&lt;p&gt;2.通过&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sudo docker inspect -f ‘{{ .Id }}’ [短ID or name]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;获取容器的完整ID。
如：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜  render git:(master) ✗ sudo docker inspect -f ‘{{ .Id }}’ cc1ec222c1ff
cc1ec222c1ff72272a00061aa197ab8ba13bd446697b9d9c1820c45ba16b75cd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.通过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker cp [本地文件路径] [ID全称]:[容器路径]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;拷贝文件，注意拷贝目录的话也一样，不用加其他参数。&lt;/p&gt;

&lt;p&gt;如果从容器中传输文件到host，通过&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker cp [ID全称]:[容器文件路径] [本地路径]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;完成。&lt;/p&gt;

&lt;p&gt;最后，在容器中就可以运行这个程序啦。&lt;/p&gt;

&lt;h2 id=&quot;4-总结&quot;&gt;4 总结&lt;/h2&gt;
&lt;p&gt;这篇文章其实介绍了基本的docker用法，nvidia提供的nvidia-docker2.0封装的很好，可以方便地建立cuda环境，这里要注意虚拟化的cuda的版本要和自己的GPU匹配。&lt;/p&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="docker" /><category term="cuda" /><summary type="html">如果你遇到了这样一个问题: 我的机器上装的cuda版本是最新的，比如cuda 11.1，然而我拿到了一个在cuda 8.0的版本上编译好的程序，我该怎么运行它呢？总不会我又要安装一个8.0的cuda吧。(这个问题来自于我在做cmu 15-418 assignment task2时需要运行在cuda8.0环境编译的参考程序cudaScan_ref，而我的cuda是11.1版本) 这个时候你肯定立刻会想到虚拟化，作为轻便好用的虚拟化工具，docker就派上用场了。 这篇文章就来介绍一下如何使用docker运行多版本的cuda。 本机环境 系统：18.04.5 LTS (Bionic Beaver) 已安装cuda版本：11.1 １ docker准备 1.1 了解原理和基本命令 如果你还是个docker小白，建议先通过官方文档了解一下docker的原理和基本用法，如运行、停止、删除镜像等。 1.2 安装 官方的安装教程提供了对应不同操作系统的安装方法。 当然，由于ubuntu 18.04源已经集成了docker软件，可以直接通过包管理工具安装。方法是 # on ubuntu 18.04 sudo apt instll docker.io 2 Nvidia Container Toolkit准备 Nvidia目前提供Nvidia Container Toolkit和nvidia-docker2包完成对docker的支持，可以通过安装教程进行安装。 安装的时候要注意其支持的系统环境和需要的环境依赖。 3 在docker上运行cuda环境 准备工作完成后，就可以来解决文章开始提出的问题了:如何在host环境为cuda11.1的情况下使用docker运行基于cuda8.0编译的程序？ 3.1 镜像获取 首先要从docker-hub上找到我们需要的环境的镜像，使用关键字cuda8.0搜索即可，然后在本地拉取镜像源。 比如：我在docker-hub上找到这样的镜像：klauskyj/cuda8.0-cudnn7 。那么就可以通过 sudo docker pull klauskyj/cuda8.0-cudnn7 拉取下来了。 通过 sudo docker ps -a 可以看到自己拉取的镜像。 3.2 运行镜像 类似于普通镜像运行自己拉取下来的镜像，runtime设为nvidia即可，如 sudo docker run -it --runtime=nvidia [DOCKER_IMAGE]:[DOCKER_TAG] /bin/bash 进入交互式环境后，去/usr/local目录下就可以看到cuda 8.0了。 3.3 运行程序 那么如何在容器中运行程序呢？我们需要将程序拷贝进去。从主机拷贝文件到容器中步骤如下： 1.通过 sudo docker ps -a 获取容器的短ID或者name。 2.通过 sudo docker inspect -f ‘{{ .Id }}’ [短ID or name] 获取容器的完整ID。 如： ➜ render git:(master) ✗ sudo docker inspect -f ‘{{ .Id }}’ cc1ec222c1ff cc1ec222c1ff72272a00061aa197ab8ba13bd446697b9d9c1820c45ba16b75cd 3.通过 sudo docker cp [本地文件路径] [ID全称]:[容器路径] 拷贝文件，注意拷贝目录的话也一样，不用加其他参数。 如果从容器中传输文件到host，通过 sudo docker cp [ID全称]:[容器文件路径] [本地路径] 完成。 最后，在容器中就可以运行这个程序啦。 4 总结 这篇文章其实介绍了基本的docker用法，nvidia提供的nvidia-docker2.0封装的很好，可以方便地建立cuda环境，这里要注意虚拟化的cuda的版本要和自己的GPU匹配。</summary></entry><entry><title type="html">CMU 15-418 assignment2 解题记录</title><link href="http://localhost:4000/2020/11/20/15-418-assignment2.html" rel="alternate" type="text/html" title="CMU 15-418 assignment2 解题记录" /><published>2020-11-20T00:00:00+08:00</published><updated>2020-11-20T00:00:00+08:00</updated><id>http://localhost:4000/2020/11/20/15-418-assignment2</id><content type="html" xml:base="http://localhost:4000/2020/11/20/15-418-assignment2.html">&lt;p&gt;下面是CMU 15-418/15-618: Parallel Computer Architecture and Programming课程解题记录。&lt;/p&gt;

&lt;p&gt;本部分题解是assignment2，主题是cuda并行编程，这里是&lt;a href=&quot;http://www.cs.cmu.edu/~418/assignment_writeups/asst2.pdf&quot;&gt;题目&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;part-1-saxpysum-of-a-by-x-plus-y&quot;&gt;Part 1 SAXPY(Sum of A by X PLUS Y)&lt;/h2&gt;

&lt;h2 id=&quot;part-2-parallel-prefix-sum&quot;&gt;Part 2 Parallel Prefix-Sum&lt;/h2&gt;
&lt;p&gt;本部分要求分别并行求解前缀和和重复元素索引。关于什么是前缀和和重复元素索引题目中有详细说明，这里我分别记录一下解题思路。&lt;/p&gt;

&lt;p&gt;由于求解重复元素索引要用到求解前缀和的方法，所以先求解前缀和，在CPU版本中，题目代码中分别给出了并行版本和串行版本，所以GPU版本只需要对CPU的并行版本进行改写即可。&lt;/p&gt;

&lt;p&gt;求解重复元素索引的方法分为下面几个步骤：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 声明如下数组flag, prefixflag,input, output
2. 如果input[index] = input[index + 1], flag[index] = 1;
3. 对flag求前缀和得到prefixflag。
4. 重复元素个数count为prefixflag最后一位的值。
5. 如果prefixflag[index] = prefixflag[index - 1], output[prefixflag[index - 1]] = index - 1。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举个例子:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;item&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;input&lt;/td&gt;
      &lt;td&gt;[1,2,2,1,1,1,3,5,3,3]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;flag&lt;/td&gt;
      &lt;td&gt;[0,1,0,1,1,0,0,0,1,0]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prefixflag&lt;/td&gt;
      &lt;td&gt;[0,0,1,1,2,3,3,3,3,4]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;output&lt;/td&gt;
      &lt;td&gt;[1,3,4,8]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;count&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="cmu15-418" /><summary type="html">下面是CMU 15-418/15-618: Parallel Computer Architecture and Programming课程解题记录。 本部分题解是assignment2，主题是cuda并行编程，这里是题目。 Part 1 SAXPY(Sum of A by X PLUS Y) Part 2 Parallel Prefix-Sum 本部分要求分别并行求解前缀和和重复元素索引。关于什么是前缀和和重复元素索引题目中有详细说明，这里我分别记录一下解题思路。 由于求解重复元素索引要用到求解前缀和的方法，所以先求解前缀和，在CPU版本中，题目代码中分别给出了并行版本和串行版本，所以GPU版本只需要对CPU的并行版本进行改写即可。 求解重复元素索引的方法分为下面几个步骤： 1. 声明如下数组flag, prefixflag,input, output 2. 如果input[index] = input[index + 1], flag[index] = 1; 3. 对flag求前缀和得到prefixflag。 4. 重复元素个数count为prefixflag最后一位的值。 5. 如果prefixflag[index] = prefixflag[index - 1], output[prefixflag[index - 1]] = index - 1。 举个例子: item value input [1,2,2,1,1,1,3,5,3,3] flag [0,1,0,1,1,0,0,0,1,0] prefixflag [0,0,1,1,2,3,3,3,3,4] output [1,3,4,8] count 4</summary></entry><entry><title type="html">Vim Cheat Sheet (不定期更新)</title><link href="http://localhost:4000/2020/11/18/basic-vim.html" rel="alternate" type="text/html" title="Vim Cheat Sheet (不定期更新)" /><published>2020-11-18T00:00:00+08:00</published><updated>2020-11-18T00:00:00+08:00</updated><id>http://localhost:4000/2020/11/18/basic-vim</id><content type="html" xml:base="http://localhost:4000/2020/11/18/basic-vim.html">&lt;p&gt;下面用一个cheat sheet记录一些vim的快捷指令，方便自己需要的时候查询。&lt;/p&gt;
&lt;h2 id=&quot;search&quot;&gt;search&lt;/h2&gt;
&lt;p&gt;查找模式中加\c为大小写不敏感查找,\C为大小写敏感查找&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ignore uppercase
/foo\c or 
:
# do not ignore uppercase
/foo\C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;replace&quot;&gt;replace&lt;/h2&gt;
&lt;p&gt;:s（substitute）命令用来查找和替换字符串。格式为&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# the partition character can be '/' or '#' or '@' (maybe other special characters)
:{作用范围}s/{目标}/{替换}/{替换标志} or 
:{作用范围}s#{目标}#{替换}#{替换标志} or
:{作用范围}s@{目标}@{替换}@{替换标志}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中,替换标志有下面几种:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;替换标志&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
      &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;i/I&lt;/td&gt;
      &lt;td&gt;大小写敏感查询&lt;/td&gt;
      &lt;td&gt;i为敏感&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;替换前需要确认&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;全局替换&lt;/td&gt;
      &lt;td&gt;一行中的多个匹配项都会被替换&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# replace foo with bar in current line for all matches
:s/foo/bar/g

# replace foo with bar in the whole context only for the first match of each line
:%s/foo/bar/

# replace foo with bar searching from line 5 to line 12
:5,12s/foo/bar/

# replace foo with bar searching from current line to the 2 plus lines(3 lines in all) in uppercase ignore case
:.,+2s/foo/bar/I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="工具" /><summary type="html">下面用一个cheat sheet记录一些vim的快捷指令，方便自己需要的时候查询。 search 查找模式中加\c为大小写不敏感查找,\C为大小写敏感查找 e.g. # ignore uppercase /foo\c or : # do not ignore uppercase /foo\C replace :s（substitute）命令用来查找和替换字符串。格式为 # the partition character can be '/' or '#' or '@' (maybe other special characters) :{作用范围}s/{目标}/{替换}/{替换标志} or :{作用范围}s#{目标}#{替换}#{替换标志} or :{作用范围}s@{目标}@{替换}@{替换标志} 其中,替换标志有下面几种: 替换标志 含义 备注 i/I 大小写敏感查询 i为敏感 c 替换前需要确认   g 全局替换 一行中的多个匹配项都会被替换 e.g. # replace foo with bar in current line for all matches :s/foo/bar/g # replace foo with bar in the whole context only for the first match of each line :%s/foo/bar/ # replace foo with bar searching from line 5 to line 12 :5,12s/foo/bar/ # replace foo with bar searching from current line to the 2 plus lines(3 lines in all) in uppercase ignore case :.,+2s/foo/bar/I</summary></entry><entry><title type="html">写博客的意义是什么？</title><link href="http://localhost:4000/2020/11/11/meaning.html" rel="alternate" type="text/html" title="写博客的意义是什么？" /><published>2020-11-11T00:00:00+08:00</published><updated>2020-11-11T00:00:00+08:00</updated><id>http://localhost:4000/2020/11/11/meaning</id><content type="html" xml:base="http://localhost:4000/2020/11/11/meaning.html">&lt;p&gt;不知道哪里冒出来的念头，突然想关注一下我的博客，之前的博客是用hexo搭建的，今天翻出来，看到&lt;strong&gt;About&lt;/strong&gt;那一栏的个人信息还停留在大三，想想应该两年多没有更新了。&lt;/p&gt;

&lt;p&gt;之前的兴趣在机器人，使用ROS软件做过很多项目，但是始终觉得只是娱乐级别的开发，有时算法可以设计得很好，但是部署到机器上就会出现各种软硬件的问题，我想还是缺乏更扎实的软硬件基础吧，机缘巧合，在研究生阶段选择了计算机体系结构，虽然接触时间不长，但被这一把技术、艺术、设计哲学能完美结合的领域深深打动并吸引着，我想这是值得我一生去探索的。&lt;/p&gt;

&lt;p&gt;碎碎念不说了。今天重新开封了自己的博客，想做个新的开始，给自己的博客换了新的主题，力求简洁而不失美感，努力让自己集中精力在博客写作的提高上。于是，我好像又变成刚开始搭建博客的那个自己，我再次问了自己这个问题：写博客的意义是什么？&lt;/p&gt;

&lt;p&gt;国内很多程序员的博客质量都很差，大概都有下面几个特点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内容错误。很多程序员照搬别人的博客，然而自己都不去验证其中的正确性。&lt;/li&gt;
  &lt;li&gt;浮于表面。很多程序员只关注于记录某个bug的解决方案，而不去深究背后的问题，这样的记录也不过是浪费时间写了一些文字而已。&lt;/li&gt;
  &lt;li&gt;最让我的反感的是那些不认真写内容，还在后面加二维码打赏的程序员。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么写博客的意义在哪里呢？&lt;/p&gt;

&lt;p&gt;我想无非也是下面几个目的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;通过技术的总结和分享巩固自己的知识。也即是”The best way to learn something is to teach it”。&lt;/li&gt;
  &lt;li&gt;锻炼自己的表达和写作能力。这在研究中是非常重要的，无论是与同行的交流还是文章的发表，讲好一个故事与做出成果同等重要。&lt;/li&gt;
  &lt;li&gt;自我的展示。通过博客展示自我从而获得不论是名誉还是经济的好处的例子不在少数，国内的如&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot;&gt;阮一峰&lt;/a&gt;，国外的如Stack Overflow的创始人 &lt;a href=&quot;https://blog.codinghorror.com/&quot;&gt;Jeff Atwood&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上，博客应该精而不在多，每一次记录都应该被认真对待，才不至于浪费时间（包括别人的时间）而自己亦无所得。亦如研究，也应该去做有价值的研究，有十年磨一剑的毅力和耐心，就像陈秀雄和王兵教授，尽管可能要耗费5年去完成，6年去审稿，但最后证明了哈密尔顿-田猜想（Hamilton-Tian conjecture）和偏零阶估计猜想（Partial C0-conjecture），是非常令人敬佩的。&lt;/p&gt;

&lt;p&gt;这篇文章是作为一个新的开始，是对自己的鞭策和鼓励，希望坚持下去，做好的研究，写好的博客。&lt;/p&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="随感" /><summary type="html">不知道哪里冒出来的念头，突然想关注一下我的博客，之前的博客是用hexo搭建的，今天翻出来，看到About那一栏的个人信息还停留在大三，想想应该两年多没有更新了。 之前的兴趣在机器人，使用ROS软件做过很多项目，但是始终觉得只是娱乐级别的开发，有时算法可以设计得很好，但是部署到机器上就会出现各种软硬件的问题，我想还是缺乏更扎实的软硬件基础吧，机缘巧合，在研究生阶段选择了计算机体系结构，虽然接触时间不长，但被这一把技术、艺术、设计哲学能完美结合的领域深深打动并吸引着，我想这是值得我一生去探索的。 碎碎念不说了。今天重新开封了自己的博客，想做个新的开始，给自己的博客换了新的主题，力求简洁而不失美感，努力让自己集中精力在博客写作的提高上。于是，我好像又变成刚开始搭建博客的那个自己，我再次问了自己这个问题：写博客的意义是什么？ 国内很多程序员的博客质量都很差，大概都有下面几个特点： 内容错误。很多程序员照搬别人的博客，然而自己都不去验证其中的正确性。 浮于表面。很多程序员只关注于记录某个bug的解决方案，而不去深究背后的问题，这样的记录也不过是浪费时间写了一些文字而已。 最让我的反感的是那些不认真写内容，还在后面加二维码打赏的程序员。 那么写博客的意义在哪里呢？ 我想无非也是下面几个目的： 通过技术的总结和分享巩固自己的知识。也即是”The best way to learn something is to teach it”。 锻炼自己的表达和写作能力。这在研究中是非常重要的，无论是与同行的交流还是文章的发表，讲好一个故事与做出成果同等重要。 自我的展示。通过博客展示自我从而获得不论是名誉还是经济的好处的例子不在少数，国内的如阮一峰，国外的如Stack Overflow的创始人 Jeff Atwood。 综上，博客应该精而不在多，每一次记录都应该被认真对待，才不至于浪费时间（包括别人的时间）而自己亦无所得。亦如研究，也应该去做有价值的研究，有十年磨一剑的毅力和耐心，就像陈秀雄和王兵教授，尽管可能要耗费5年去完成，6年去审稿，但最后证明了哈密尔顿-田猜想（Hamilton-Tian conjecture）和偏零阶估计猜想（Partial C0-conjecture），是非常令人敬佩的。 这篇文章是作为一个新的开始，是对自己的鞭策和鼓励，希望坚持下去，做好的研究，写好的博客。</summary></entry><entry><title type="html">Welcome</title><link href="http://localhost:4000/2018/07/01/welcome.html" rel="alternate" type="text/html" title="Welcome" /><published>2018-07-01T00:00:00+08:00</published><updated>2018-07-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/07/01/welcome</id><content type="html" xml:base="http://localhost:4000/2018/07/01/welcome.html">&lt;p&gt;If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost:&lt;/p&gt;

&lt;p&gt;You may want to &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/configuration&quot;&gt;config the site&lt;/a&gt; or &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/writing-posts&quot;&gt;writing a post&lt;/a&gt; next. Please feel free to &lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/issues&quot;&gt;create an issue&lt;/a&gt; or &lt;a href=&quot;mailto:kitian616@outlook.com&quot;&gt;send me email&lt;/a&gt; if you have any questions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;p&gt;If you like TeXt, don’t forget to give me a star. :star2:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&amp;amp;style=social&quot; alt=&quot;Star This Project&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="TeXt" /><summary type="html">If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost: You may want to config the site or writing a post next. Please feel free to create an issue or send me email if you have any questions.</summary></entry><entry><title type="html">Post with Header Image</title><link href="http://localhost:4000/2018/06/01/header-image.html" rel="alternate" type="text/html" title="Post with Header Image" /><published>2018-06-01T00:00:00+08:00</published><updated>2018-06-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/06/01/header-image</id><content type="html" xml:base="http://localhost:4000/2018/06/01/header-image.html">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>tianyun ma</name><email>himarsmty@gmail.com</email></author><category term="TeXt" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry></feed>